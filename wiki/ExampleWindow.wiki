{{{
// this line defines the namespace, this needs to match the relative path to
// where your file is located, in general you only need to change the part
// marked in yellow.
namespace ManiaLivePlugins\Author\Plugin\Gui\Windows;

// you need to rename every component, that you are using in the code.
// for more elements to use, you can check the
// “Important Namespaces and its Classes”-section.
use ManiaLive\Gui\Toolkit\Elements\Icons64x64_1;
use ManiaLive\Gui\Toolkit\Elements\Label;
use ManiaLive\Gui\Windowing\Controls\Panel;

// here the actual creation process starts.
// important: don’t forget to inherit the Window class.
class Info extends \ManiaLive\Gui\Windowing\Window
{
	// protected properties for every component that you add to your window.
	// note: you can set public here to be able to access them from outside
	// the class. it’s faster, but architecture doesn’t like it ...
	protected $title;
	protected $text;
	protected $panel;
	protected $button;
	
	// the described initializeComponents method. Called on the first time
	// the window is used.
	// we initialize the components and add them to the window, so once the
	// window is rendered, all its components will be too.
	protected function initializeComponents()
	{
		// creating the panel which serves, as described,
		// as the window’s background
		$this->panel = new Panel();
		$this->addComponent($this->panel);

		// add a text to the window, we don’t define size and
		// position yet.
		$this->text = new Label();
		$this->text->enableAutonewline();
		$this->addComponent($this->text);
		
		// create the close button.
		$this->button = new Icons64x64_1(3);
		$this->button->setSubStyle(Icons64x64_1::Close);
		// this is a very cool feature of the Window class.
		// use the callback method to create an action number that is
		// associated with a method of the current class.
		// once this button gets pressed the hide method will be executed!
		$this->button->setAction($this->callback('hide'));
		$this->addComponent($this->button);
	}
	
	// we haven’t got stuff to do when the window is being closed.
	protected function onHide() {}
	
	// this is executed every time the window is drawn onto the screen.
	// we will position and draw all elements here.
	protected function onShow()
	{
		// move the close button 5 to the left of the right border.
		// move it 1.6 units downwards.
		// this will result in the right top corner.
		$this->button->setPosition($this->sizeX - 5, 1.6);
		
		// stretch panel background to fill window size ...
		$this->panel->setSize($this->sizeX, $this->sizeY);
		
		// position and resize text ...
		$this->text->setPosition(2, 6);
		$this->text->setSize($this->sizeX - 4, $this->sizeY - 6);
	}
	
	// setter for the message text, our components are protected, remember?
	function setText($text)
	{
		$this->text->setText($text);
	}
	
	// same for the title.
	function setTitle($title)
	{
		$this->panel->setTitle($title);
	}
}
?>
}}}